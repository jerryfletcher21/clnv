#!/usr/bin/env python3

"""clnv-list-forwards"""

import os
import sys
import subprocess
import json
import datetime


INFO = """\
clnv list-forwards "%Y/%m/%d %H:%M:%S"

visualizer for listforwards
"""

DATE_FORMAT = "%Y/%m/%d %H:%M:%S"


def subprocess_run_command(program, print_error=True):
    """run subprocess"""
    try:
        process = subprocess.run(program, capture_output=True, check=False)
    except FileNotFoundError:
        program_name = program[0]
        print(f"error: command {program_name} does not exists", file=sys.stderr)
        return False
    if process.returncode != 0:
        if print_error:
            print(process.stderr.decode(), file=sys.stderr)
        return False

    return process.stdout


def cln_list_forwards():
    """run cln listforwards"""

    cln_bin = os.getenv("CLN_BIN")
    if cln_bin is None:
        print("CLN_BIN not set", file=sys.stderr)
        return False
    cln_list_forwards_command = cln_bin.split() + ["listforwards"]

    output = subprocess_run_command(cln_list_forwards_command)
    if output is False:
        print(f"error: running {cln_bin} listforwards", file=sys.stderr)
        return False

    return json.loads(output)


def sat_from_msat(msat):
    """convert from msat to sat"""
    return msat / 1000


def date_from_timestamp(timestamp):
    """get date from timestamp"""
    if timestamp is False:
        return False

    return datetime.datetime.fromtimestamp(timestamp).strftime(DATE_FORMAT)


def forward_print(forward):
    """print the output of listforwards"""
    received_time_timestamp = forward.get("received_time", False)
    if received_time_timestamp is not False:
        received_time = date_from_timestamp(received_time_timestamp)
    else:
        received_time = "no date"

    resolved_time_timestamp = forward.get("resolved_time", False)
    if resolved_time_timestamp is not False:
        resolved_time = date_from_timestamp(resolved_time_timestamp)
    else:
        resolved_time = "no date"

    in_channel = forward.get("in_channel", False)
    out_channel = forward.get("out_channel", False)

    status = forward.get("status", False)

    in_msat = forward.get("in_msat", False)
    if in_msat is not False:
        in_sat = sat_from_msat(in_msat)
    else:
        in_sat = 0

    out_msat = forward.get("out_msat", False)
    if out_msat is not False:
        out_sat = sat_from_msat(out_msat)
    else:
        out_sat = 0

    if in_msat is False or out_msat is False:
        difference = 0
    else:
        difference = in_sat - out_sat

    fee_msat = forward.get("fee_msat", False)
    if fee_msat is not False:
        fee_sat = sat_from_msat(fee_msat)
    else:
        fee_sat = 0

    # pylint: disable=C0209 consider-using-f-string
    print("%-12s %-16s %-16s %-19s %-19s %12d %12d %8d %8d" % (
        status,
        in_channel, out_channel,
        received_time, resolved_time,
        in_sat, out_sat,
        fee_sat, difference
    ))


def analize_forwards(starting_date, status_print=None):
    """analize the output of listforwards"""
    try:
        starting_timestamp = datetime.datetime.strptime(starting_date, DATE_FORMAT).timestamp()
    except ValueError:
        print(f"error: date format should be {DATE_FORMAT}", file=sys.stderr)
        return False

    forwards_all = cln_list_forwards()
    if forwards_all is False:
        return False

    forwards = forwards_all["forwards"]

    number_offered = 0
    number_settled = 0
    number_failed = 0
    number_local_failed = 0

    settled_fee = 0

    for forward in forwards:
        received_time_timestamp = forward.get("received_time", False)
        if received_time_timestamp < starting_timestamp:
            continue

        status = forward.get("status", False)

        if status_print is None or status_print == status:
            forward_print(forward)

        if status == "offered":
            number_offered += 1
        elif status == "settled":
            number_settled += 1
            fee_msat = forward.get("fee_msat", False)
            if fee_msat is not False:
                fee_sat = sat_from_msat(fee_msat)
                settled_fee += fee_sat
            else:
                print("error: fee not present in settled forward", file=sys.stderr)
        elif status == "failed":
            number_failed += 1
        elif status == "local_failed":
            number_local_failed += 1
        else:
            print(f"error: status is {status}", file=sys.stderr)

    percentage_success = number_settled / number_failed * 100

    print("\n", end="")

    # pylint: disable=C0209 consider-using-f-string
    print("offered:      %d" % number_offered)
    print("settled:      %d" % number_settled)
    print("failed:       %d" % number_failed)
    print("local failed: %d" % number_local_failed)

    print("\n", end="")

    # pylint: disable=C0209 consider-using-f-string
    print("settled fee:  %d" % settled_fee)

    print("\n", end="")

    # pylint: disable=C0209 consider-using-f-string
    print("success:      %s%%" % format(percentage_success, ".3f"))

    return True


def main(argv):
    """main function"""
    if len(argv) < 1:
        print("error: insert starting date", file=sys.stderr)
        sys.exit(1)

    if argv[0] in ("-h", "--help"):
        print(INFO, end="")
        sys.exit(0)
    else:
        starting_date_global = argv[0]
        argv = argv[1:]

    status_print_global = False
    if len(argv) >= 1:
        status_print_global = argv[0]
        argv = argv[1:]

    possible_status = ("offered", "settled", "failed", "local_failed")
    if status_print_global not in possible_status:
        possible_status_str = str(possible_status)
        print(f"error: status can only be: {possible_status_str}", file=sys.stderr)
        sys.exit(1)

    return analize_forwards(starting_date_global, status_print=status_print_global)


if __name__ == "__main__":
    if main(sys.argv[1:]) is True:
        sys.exit(0)
    else:
        sys.exit(1)
