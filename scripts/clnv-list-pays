#!/bin/sh

default_number=32
default_status="complete-pending"

info=$(cat << EOF
clnv list-pays [--self] [--description] [--hash] [--preimage] [--bolt] [number/all] [status]

visualizer for listpays

default number is $default_number

status can be complete, pending, complete-pending, failed, all
default status is $default_status
EOF
)

is_uint_greater_than_zero_or_all() {
    case "$1" in
        all)
            return 0
        ;;
        ''|0|*[!0-9]*)
            return 1
        ;;
        *)
            return 0
        ;;
    esac
}

print_self=false
print_description=false
print_hash=false
print_preimage=false
print_bolt=false

while [ "$#" -gt 0 ]; do
    case "$1" in
        -h|--help)
            echo "$info"
            exit 0
        ;;
        --self)
            print_self=true
        ;;
        --description)
            print_description=true
        ;;
        --hash)
            print_hash=true
        ;;
        --preimage)
            print_preimage=true
        ;;
        --bolt)
            if [ "$CLNV_PRIVATE" = true ]; then
                echo "error: can not print bolt in private mode" >&2
                exit 1
            fi
            print_bolt=true
        ;;
        -*)
            echo "error: option $1 not recognized" >&2
            exit 1
        ;;
        *)
            break
        ;;
    esac
    shift 1
done

if [ "$#" -gt 0 ]; then
    number="$1"
    shift 1
    if ! is_uint_greater_than_zero_or_all "$number"; then
        echo "error: $number is not a number greater than 0 or the string 'all'" >&2
        exit 1
    fi
else
    number="$default_number"
fi

if [ "$#" -gt 0 ]; then
    target_status="$1"
    shift 1
    case "$target_status" in
        complete|pending|complete-pending|failed|all)
            if [ "$CLNV_PRIVATE" = true ]; then
                case "$target_status" in
                    pending|all)
                        echo "error: pending/all payments can not be shown in private mode" >&2
                        exit 1
                    ;;
                esac
            fi
        ;;
        *)
            printf "%s%s\n" \
                "error: $target_status can only be " \
                "complete, pending, complete-pending, failed, all" \
                >&2
            exit 1
        ;;
    esac
else
    target_status="$default_status"
fi

timestamp_to_date() {
    if [ "$1" != "null" ]; then
        date -d @"$1" +"%Y/%m/%d %H:%M"
        # date -d @"$1" -u +"%Y/%m/%d %H:%M"
    # else
    #     echo "$1"
    fi
}

msat_to_sat() {
    msat="$(cat)"
    echo "$msat / (10 ^ 3)" | bc
}

lightning_node_alias() {
    if [ "$CLNV_PRIVATE" = false ]; then
        $CLN_BIN listnodes "$1" |
        jq -r '.nodes[].alias' |
        tr -d -c '[:print:]'
    else
        echo "a nice node alias"
    fi
}

jq_inside="\(.status) \(.destination) \(.amount_sent_msat) \(.created_at) \(.completed_at) \(.number_of_parts) \(.payment_hash) \(.preimage) \(.bolt11) \(.label)"
jq_argument=$(cat << EOF
.pays[] | "$jq_inside"
EOF
)

our_id="$($CLN_BIN getinfo | jq -r '.id')"

if [ ! -t 0 ]; then
    check_status_again=true
else
    check_status_again=false
fi

if [ ! -t 0 ]; then
    cat
else
    case "$target_status" in
        complete|pending|failed)
            $CLN_BIN -k listpays status="$target_status"
        ;;
        complete-pending)
            $CLN_BIN -k listpays status=complete
            if [ "$CLNV_PRIVATE" = false ]; then
                $CLN_BIN -k listpays status=pending
            fi
        ;;
        all)
            $CLN_BIN listpays
        ;;
    esac
fi |
jq -r "$jq_argument" |
while read -r line; do
    status="$(echo "$line" | cut -d " " -f 1)"
    destination_id="$(echo "$line" | cut -d " " -f 2)"
    if [ "$print_self" = true ] || [ "$destination_id" != "$our_id" ]; then
        if [ "$check_status_again" = true ]; then
            case "$target_status" in
                complete|pending|failed)
                    if [ "$status" = "$target_status" ]; then
                        printf "%s\n" "$line"
                    fi
                ;;
                complete-pending)
                    case "$status" in
                        complete|pending)
                            printf "%s\n" "$line"
                        ;;
                    esac
                ;;
                all)
                    printf "%s\n" "$line"
                ;;
            esac
        else
            printf "%s\n" "$line"
        fi
    fi
done |
if [ "$number" != "all" ]; then
    tail -n "$number"
else
    cat
fi |
while read -r line; do
    status="$(echo "$line" | cut -d " " -f 1)"
    destination_id="$(echo "$line" | cut -d " " -f 2)"
    amount_sent_msat="$(echo "$line" | cut -d " " -f 3)"
    created_at_timestamp="$(echo "$line" | cut -d " " -f 4)"
    completed_at_timestamp="$(echo "$line" | cut -d " " -f 5)"
    number_of_parts="$(echo "$line" | cut -d " " -f 6)"
    payment_hash="$(echo "$line" | cut -d " " -f 7)"
    preimage="$(echo "$line" | cut -d " " -f 8)"
    bolt11="$(echo "$line" | cut -d " " -f 9)"
    label="$(echo "$line" | cut -d " " -f 10-)"

    destination="$(lightning_node_alias "$destination_id")"

    amount_sent_sat="$(echo "$amount_sent_msat" | cut -d "m" -f 1 | msat_to_sat)"

    created_at="$(timestamp_to_date "$created_at_timestamp")"
    completed_at="$(timestamp_to_date "$completed_at_timestamp")"

    if [ "$number_of_parts" = "null" ] && [ "$status" = "complete" ]; then
        number_of_parts=1
    fi

    if [ "$label" = "null" ]; then
        label=""
    fi

    if [ "$CLNV_PRIVATE" = true ]; then
        label="a nice label"
    fi

    printf "%-8s %9s %16s %16s %4s %-24s %s\n" \
        "$status" "$amount_sent_sat" \
        "$created_at" "$completed_at" \
        "$number_of_parts" \
        "$destination" "$label"
    if [ "$print_hash" = true ]; then
        printf "%s\n" "$payment_hash"
    fi
    if [ "$print_preimage" = true ]; then
        printf "%s\n" "$preimage"
    fi
    if [ "$print_description" = true ]; then
        if [ "$CLNV_PRIVATE" = false ]; then
            description="$(
                $CLN_BIN decode "$bolt11" |
                jq -r '. | "\(.description)"' |
                cut -b -64
            )"
        else
            description="a nice description"
        fi
        printf "%s\n" "$description"
    fi
    if [ "$print_bolt" = true ]; then
        printf "%s\n" "$bolt11"
    fi
done
